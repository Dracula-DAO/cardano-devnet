#!/usr/bin/env bash

while getopts "mie" opt; do
    case $opt in
        m)
            START_MONITOR=true
            ;;
        i)
            START_INDEXER=true
            ;;
        e)
            START_EXPLORER=true
            ;;
        \?)
            echo "Invalid option -$OPTARG"
            print_help
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))

if [[ ! $1 == ?(-)+([0-9]) ]]; then
  SCRIPTNAME=$(basename $0)
  echo "usage: $SCRIPTNAME [-m] [-i] [-e] <block time>"
  echo "  -m  run terminal monitor"
  echo "  -i  run indexer"
  echo "  -e  run explorer"
  exit -1
fi

if [ ! $(type -P "cardano-node" ) ]; then
  echo "cardano-node not in path, configuring for docker"
  DOCKER=true
else
  echo "found cardano-node in path"
fi

RUNTIMEDIR=$DEVNET_ROOT/runtime
TARGETDIR=$RUNTIMEDIR/chain

CARDANO_CLI="cardano-cli"
CARDANO_CLI_RUNTIMEDIR="$RUNTIMEDIR"
CARDANO_CLI_KEYS_PATH="$CARDANO_ASSETS_PATH/keys"
echo "CARDANO_CLI_KEYS_PATH=$CARDANO_CLI_KEYS_PATH"

if [ ! $(type -P "ogmios" ) ]; then
  echo "ogmios not in path, configuring for docker"
  DOCKER=true
else
  echo "found ogmios in path"
fi

if [ "$DOCKER" == "true" ] && [ ! $(type -P "docker" ) ]; then
  echo "docker not in path, please install either cardano-node and ogmios, or docker"
  exit -1
fi

# Clean up old runs
[ -d "$RUNTIMEDIR" ] && { echo "Cleaning up directory $RUNTIMEDIR" ; rm -rf $RUNTIMEDIR ; }
mkdir -p "$RUNTIMEDIR"
mkdir -p "$RUNTIMEDIR/db"
mkdir -p "$RUNTIMEDIR/ipc"

# Set up devnet
$DEVNET_ROOT/scripts/setup-devnet $1 

# Set up signing pipeline for cardano-cli
mkfifo $RUNTIMEDIR/tx.draft
mkfifo $RUNTIMEDIR/tx.signed

if [ "$DOCKER" == "true" ]; then

  docker compose up cardano-node ogmios --detach

else

  if pgrep -x "cardano-node" > /dev/null
  then
    echo "Stopping cardano-node"
    pkill cardano-node
  fi

  if pgrep -x "ogmios" > /dev/null
  then
    echo "Stopping ogmios"
    pkill ogmios
  fi

  echo cardano-node run \
    --config $TARGETDIR/cardano-node.json \
    --topology $TARGETDIR/topology.json \
    --database-path $RUNTIMEDIR/db \
    --socket-path $CARDANO_NODE_SOCKET_PATH \
    --shelley-operational-certificate $TARGETDIR/opcert.cert \
    --shelley-kes-key $TARGETDIR/kes.skey \
    --shelley-vrf-key $TARGETDIR/vrf.skey
  cardano-node run \
    --config $TARGETDIR/cardano-node.json \
    --topology $TARGETDIR/topology.json \
    --database-path $RUNTIMEDIR/db \
    --socket-path $CARDANO_NODE_SOCKET_PATH \
    --shelley-operational-certificate $TARGETDIR/opcert.cert \
    --shelley-kes-key $TARGETDIR/kes.skey \
    --shelley-vrf-key $TARGETDIR/vrf.skey > /dev/null 2>&1 &
  CARDANO_NODE_PID=$!

  # ogmios >6.0.0 required (assumed to be in path)
  echo ogmios --node-socket $CARDANO_NODE_SOCKET_PATH \
         --node-config $TARGETDIR/cardano-node.json
  ogmios --node-socket $CARDANO_NODE_SOCKET_PATH \
         --node-config $TARGETDIR/cardano-node.json > /dev/null 2>&1 &
  OGMIOS_PID=$!

fi

# transfer from faucet -> faucet to put an indexed tx on-chain (genesis tx's are not indexed)
# note: we're using named fifos here so we issue the commands in "reverse" order so
# there is a reader listening on the pipe when we create the writer to prevent an error
sleep 1
echo "#"
echo "# build / sign / submit in reverse order because pipes need to have listeners before you"
echo "# can write to them. (tx.draft and tx.signed are fifos)"
echo "#"
echo $CARDANO_CLI conway transaction submit \
  --tx-file "$CARDANO_CLI_RUNTIMEDIR/tx.signed" 
$CARDANO_CLI conway transaction submit \
  --tx-file "$CARDANO_CLI_RUNTIMEDIR/tx.signed" &
sleep 1
echo $CARDANO_CLI conway transaction sign \
  --tx-body-file "$CARDANO_CLI_RUNTIMEDIR/tx.draft" \
  --signing-key-file "$CARDANO_CLI_KEYS_PATH/faucet.skey" \
  --out-file "$CARDANO_CLI_RUNTIMEDIR/tx.signed"
$CARDANO_CLI conway transaction sign \
  --tx-body-file "$CARDANO_CLI_RUNTIMEDIR/tx.draft" \
  --signing-key-file "$CARDANO_CLI_KEYS_PATH/faucet.skey" \
  --out-file "$CARDANO_CLI_RUNTIMEDIR/tx.signed" &
sleep 1
echo $CARDANO_CLI conway transaction build \
  --tx-in 8c78893911a35d7c52104c98e8497a14d7295b4d9bf7811fc1d4e9f449884284#0 \
  --change-address addr_test1vztc80na8320zymhjekl40yjsnxkcvhu58x59mc2fuwvgkc332vxv \
  --out-file "$CARDANO_CLI_RUNTIMEDIR/tx.draft"
$CARDANO_CLI conway transaction build \
  --tx-in 8c78893911a35d7c52104c98e8497a14d7295b4d9bf7811fc1d4e9f449884284#0 \
  --change-address addr_test1vztc80na8320zymhjekl40yjsnxkcvhu58x59mc2fuwvgkc332vxv \
  --out-file "$CARDANO_CLI_RUNTIMEDIR/tx.draft"

if [ -n "$START_INDEXER" ]; then
  echo "Starting indexer"
  if [ -n "$START_MONITOR" ]; then
    node $DEVNET_ROOT/src/devnet/indexer.mjs > /dev/null 2>&1 &
  else 
    # If we're not starting the monitor then put indexer in foreground
    node $DEVNET_ROOT/src/devnet/indexer.mjs
  fi
  INDEXER_PID=$!
fi

if [ -n "$START_EXPLORER" ]; then
  echo "Starting explorer"
  (cd $DEVNET_ROOT/explorer && npm run dev > /dev/null 2>&1) &
  EXPLORER_PID=$!
fi

function clean_up {
  echo
  echo "Trapped exit; cleaning up"

  if [ -n "$START_INDEXER" ]; then
    echo "Killing indexer pid: $INDEXER_PID"
    kill $INDEXER_PID
  fi
  if [ -n "$START_EXPLORER" ]; then
    echo "Killing explorer pid: $EXPLORER_PID"
    kill $EXPLORER_PID
  fi

  if [ "$DOCKER" == "true" ]; then
    docker compose down
  else
    echo "Killing cardano-node pid: $CARDANO_NODE_PID"
    kill $CARDANO_NODE_PID
    echo "Killing ogmios pid: $OGMIOS_PID"
    kill $OGMIOS_PID
  fi

  kill -term $$
}

trap clean_up EXIT

if [ -n "$START_MONITOR" ]; then
  echo "Starting monitor"
  monitor
else
  sleep infinity
fi
